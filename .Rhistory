install.packages(xlconnect)
install.packages("XLConnect")
library(XLConnect)
a <-readWorksheet(loadWorkbook("Z:\Data\RAW DATA_BAU_TT\Closed Aja\2012\Closed_MTTR_Detail_Monthly_120301.xlsx"),sheet=3)
a <-readWorksheet(loadWorkbook("Z:\\Data\\RAW DATA_BAU_TT\\Closed Aja\\2012\\Closed_MTTR_Detail_Monthly_120301.xlsx"),sheet=3)
a <-readWorksheet(loadWorkbook("Z:\\Data\\RAW DATA_BAU_TT\\Closed Aja\\2012\\Closed_MTTR_Detail_Monthly_120301.xlsx"),sheet=1)
install.packages("xlsx")
a <-read.xlsx("Z:\\Data\\RAW DATA_BAU_TT\\Closed Aja\\2012\\Closed_MTTR_Detail_Monthly_120301.xlsx"),sheet=1)
library(xlsx)
a <-read.xlsx("Z:\\Data\\RAW DATA_BAU_TT\\Closed Aja\\2012\\Closed_MTTR_Detail_Monthly_120301.xlsx"),1)
a <-read.xlsx("Z:\\Data\\RAW DATA_BAU_TT\\Closed Aja\\2012\\Closed_MTTR_Detail_Monthly_120301.xlsx",1)
install.packages("RJavaTools")
a <-read.xlsx("Z:\\Data\\RAW DATA_BAU_TT\\Closed Aja\\2012\\Closed_MTTR_Detail_Monthly_120301.xlsx",1)
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
package_df <- as.data.frame(installed.packages("/Library/Frameworks/R.framework/Versions/2.15/Resources/library"))
package_list <- as.character(package_df$Package)
## Re-install Install packages
install.packages(package_list)
package_df <- as.data.frame(installed.packages("/Library/Frameworks/R.framework/Versions/2.15/Resources/library"))
package_list <- as.character(package_df$Package)
## Re-install Install packages
install.packages(package_list)
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
citation()
citation("shiny")
setwd("D:/Google Drive/TM/TM/Buji/cei_demo")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
google.map <- get_map(location = 'Brazil', zoom=4,maptype="terrain")
m0 <- ggmap(google.map)
m1 <- m0 + geom_polygon(color = 'grey90', size = .01, aes(x=long, y=lat, group=group, fill=as.factor(test)), data=MapC, alpha=.6)
m1 + guides(fill=FALSE) + scale_fill_manual(values=c("red"))
rm(list = ls())
library(ggplot2)
library(rgdal)
library(ggmap)
# READ SHAPEFILE OF BOUNDARIES
Map <- readShapePoly("municipios_br.shp")
head(as.data.frame(Map))
Map = gBuffer(Map, width=0, byid=TRUE)
MapC <- fortify(Map, region="CODIGO_MUN") # municipalities
MapP <- fortify(Map, region="CODIGO_UF") # state boundaries
MapC$test <- 1
MapP$test <- 1
MapC <- Map[order(MapC$order),]
MapP <- MapP[order(MapP$order),]
rm(list = ls())
library(ggplot2)
library(rgdal)
library(ggmap)
# READ SHAPEFILE OF BOUNDARIES
Map <- readShapePoly("municipios_br.shp")
head(as.data.frame(Map))
Map = gBuffer(Map, width=0, byid=TRUE)
MapC <- fortify(Map, region="CODIGO_MUN") # municipalities
MapP <- fortify(Map, region="CODIGO_UF") # state boundaries
MapC$test <- 1
MapP$test <- 1
MapC <- Map[order(MapC$order),]
MapP <- MapP[order(MapP$order),]
library(raster)
adm1 <- getData('GADM', country='HUN', level=0)
adm2 <- getData('GADM', country='HUN', level=1)
library(ggplot2)
fadm1 = fortify(adm1)
fadm2 = fortify(adm2)
ggplot(fadm1, aes(x = long, y = lat, group = group)) + geom_path() +
geom_polygon(data = fadm2, aes(x = long, y = lat),
fill = "green", alpha = 0.5) +
geom_path(data = fadm2, aes(x = long, y = lat), color = "blue") +
theme_bw()
library(raster)
adm1 <- getData('GADM', country='MAL', level=0)
adm2 <- getData('GADM', country='MAL', level=1)
library(raster)
adm1 <- getData('GADM', country='MALAYSIA', level=0)
adm2 <- getData('GADM', country='MALAYSIA', level=1)
library(raster)
adm1 <- getData('GADM', country='MYS', level=0)
adm2 <- getData('GADM', country='MYS', level=1)
library(ggplot2)
fadm1 = fortify(adm1)
fadm2 = fortify(adm2)
ggplot(fadm1, aes(x = long, y = lat, group = group)) + geom_path() +
geom_polygon(data = fadm2, aes(x = long, y = lat),
fill = "green", alpha = 0.5) +
geom_path(data = fadm2, aes(x = long, y = lat), color = "blue") +
theme_bw()
ggplot(fadm1, aes(x = long, y = lat, group = group)) + geom_path() +
geom_polygon(data = fadm2, aes(x = long, y = lat),
fill = "green", alpha = 0.5) +
geom_path(data = fadm2, aes(x = long, y = lat), color = "blue") +
theme_bw()
ggplot(fadm1, aes(x = long, y = lat, group = group)) + geom_path() +
geom_polygon(data = fadm2, aes(x = long, y = lat),
fill = "green", alpha = 0.5) +
geom_path(data = fadm2, aes(x = long, y = lat), color = "blue") +
theme_bw()
library(raster)
adm1 <- getData('GADM', country='HUN', level=0)
adm2 <- getData('GADM', country='HUN', level=1)
library(ggplot2)
fadm1 = fortify(adm1)
fadm2 = fortify(adm2)
ggplot(fadm1, aes(x = long, y = lat, group = group)) + geom_path() +
geom_polygon(data = fadm2, aes(x = long, y = lat),
fill = "green", alpha = 0.5) +
geom_path(data = fadm2, aes(x = long, y = lat), color = "blue") +
theme_bw()
m0 + geom_polygon(size = .01,
aes(x = long, y = lat, group = group, fill = as.factor('red')),
data = MapC,
alpha = .6) +
geom_path(color = 'grey50', size = .1, aes(x = long, y = lat, group = group),
data=MapP, alpha=.9) +
guides(fill=FALSE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
j <- read.csv("hsi.csv")
j
j <- read.csv("hsi.csv")
#j <- filter(j, j$msan  == paste("CBJ"))
j <-
aggregate(
cbind(
j$dt,j$total
) ~ j$dt , data = j, mean , na.rm = TRUE
)
View(j)
j <- read.csv("hsi.csv")
j <- read.csv("hsi.csv")
j <-
aggregate(
cbind(
j$dt,j$total
) ~ j$dt , data = j, mean , na.rm = TRUE
)
View(j)
j <- read.csv("hsi.csv")
as.Date(j$dt)
View(j)
j <- read.csv("hsi.csv")
j <- aggregate(cbind(j$dt,j$total) ~ j$dt , data = j, sum , na.rm = TRUE)
View(j)
j <- read.csv("hsi.csv")
View(j)
j <- read.csv("hsi.csv")
j <- aggregate(cbind(j$dt,j$total) ~ j$dt , data = j, sum , na.rm = TRUE)
View(j)
j <- read.csv("hsi.csv")
j <- aggregate(cbind(j$dt,j$total) ~ j$dt , data = j, sum , na.rm = TRUE)
View(j)
j <- read.csv("hsi.csv")
j <- aggregate(cbind(j$dt,j$total) ~ j$dt , data = j, sum , na.rm = TRUE)
names(j) = c("dt","count","total")
j <- j[with(j, order(dt)), ]
View(j)
j <- read.csv("hsi.csv")
j <- aggregate(cbind(j$dt,j$total) ~ j$dt , data = j, sum , na.rm = TRUE)
names(j) = c("dt","count","total")
j <- j[with(j, order(as.Date(dt, "%m/%d/%y"))), ]
View(j)
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(j)
View(j)
shiny::runApp()
j <- read.csv("hsi.csv")
j <- aggregate(cbind(j$dt,j$total) ~ j$dt , data = j, sum , na.rm = TRUE)
names(j) = c("dt","count","total")
j <- j[with(j, order(as.Date(dt, "mm/dd/yyyy"))), ]
print(j)
j <- j[with(j, order(as.Date(dt, "mm/dd/yyyy"))), ]
View(j)
j <- j[with(j, order(as.Date.date(dt, "mm/dd/yyyy"))), ]
j <- j[with(j, order(as.Date.numeric(dt, "mm/dd/yyyy"))), ]
j <- j[with(j, order(as.Date.character(dt, "mm/dd/yyyy"))), ]
j
j <- j[with(j, order(as.Date.default(dt, "mm/dd/yyyy"))), ]
j <- j[with(j, order(as.Date.factor(dt, "mm/dd/yyyy"))), ]
j
j[order(as.Date(j$dt, format="%d/%m/%Y")),]
j[order(as.Date(j$dt, format="%m/%d/%Y")),]
shiny::runApp()
View(j)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
